# Graph RAG MCP Server Configuration
# Copy this file to .env and fill in your values

# =============================================================================
# REQUIRED: Gemini API Configuration
# =============================================================================
# Get your API key from: https://aistudio.google.com/app/apikey
GEMINI_API_KEY=your_gemini_api_key_here

# =============================================================================
# RDF Graph Configuration (Optional - uses embedded SQLite)
# =============================================================================
# RDF SQLite database file path (optional, defaults to .vault_graph.db)
# RDF_DB_PATH=/custom/path/to/vault_graph.db

# RDF store identifier (optional, defaults to obsidian_vault_graph)
# RDF_STORE_IDENTIFIER=my_vault_graph

# =============================================================================
# Vault Configuration (Optional - defaults to parent directory)
# =============================================================================
# Comma-separated list of vault paths (optional, defaults to parent folder)
# OBSIDIAN_RAG_VAULTS=/path/to/vault1,/path/to/vault2

# ChromaDB storage location (optional, defaults to .chroma_db)
# OBSIDIAN_RAG_CHROMA_DIR=/custom/path/to/chroma

# ChromaDB collection name (optional, defaults to obsidian_vault)
# OBSIDIAN_RAG_COLLECTION=my_vault_collection

# =============================================================================
# Model Configuration (Optional)
# =============================================================================
# Embedding model for vector search (optional, defaults to all-MiniLM-L6-v2)
# OBSIDIAN_RAG_EMBEDDING_MODEL=all-mpnet-base-v2

# Gemini model name (optional, defaults to gemini-2.5-flash)
# OBSIDIAN_RAG_GEMINI_MODEL=gemini-2.5-flash

# =============================================================================
# Chunking Configuration (Optional)
# =============================================================================
# Maximum characters per chunk (optional, defaults to 1800)
# OBSIDIAN_RAG_MAX_CHARS=2000

# Character overlap between chunks (optional, defaults to 200)
# OBSIDIAN_RAG_OVERLAP=250

# =============================================================================
# MCP Server Configuration (Optional)
# =============================================================================
# Port for HTTP MCP server (optional, defaults to 8765)
# OBSIDIAN_RAG_MCP_PORT=8765

# Host for HTTP MCP server (optional, defaults to localhost)
# OBSIDIAN_RAG_MCP_HOST=0.0.0.0

# =============================================================================
# File Processing Configuration (Optional)
# =============================================================================
# Archive folder name (optional, defaults to Archive)
# OBSIDIAN_RAG_ARCHIVE_FOLDER=Archived

# =============================================================================
# Installation and Usage Notes
# =============================================================================
# 
# 1. Install dependencies:
#    uv sync
#
# 2. Index your vault:
#    uv run scripts/reindex.py all
#
# 3. Start MCP server (stdio for Claude Desktop):
#    uv run main.py
#
# 4. Or start file watcher for real-time updates:
#    uv run scripts/reindex_watch.py start
#
# 5. Check status:
#    uv run scripts/reindex.py status
#
# For Claude Desktop integration, add to your MCP settings:
# {
#   "mcpServers": {
#     "graph-rag-obsidian": {
#       "command": "uv",
#       "args": ["run", "python", "main.py"],
#       "cwd": "/path/to/graph-rag-mcp-server",
#       "env": {
#         "GEMINI_API_KEY": "your_api_key_here"
#       }
#     }
#   }
# }